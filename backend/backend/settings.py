"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.13.
"""

from pathlib import Path
import os
import environ
import ssl
import certifi
from datetime import timedelta

# Base Directory and Environment Configuration
# BASE_DIR defines the root directory of the project. It is used to construct file paths relative to the project.
# environ.Env is used to manage environment variables, ensuring secure and flexible configuration.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
environ.Env.read_env(BASE_DIR / ".env")

# Basic Project Settings
# SECRET_KEY is used for cryptographic signing. Keep this value secret in production.
# DEBUG determines if debug mode is enabled. Set to False in production for better security.
# ALLOWED_HOSTS specifies a list of hosts/domains that can serve the application.
SECRET_KEY = env("SECRET_KEY")
DEBUG = True
ALLOWED_HOSTS = ["*"]

# Admin Credentials
# These settings define default admin credentials. Customize them for better security.
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "admin")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "password")
ADMIN_EMAIL = os.getenv("ADMIN_EMAIL", "admin@example.com")

# Installed Applications
# INSTALLED_APPS contains the list of Django and third-party apps used in the project.
# Each app provides specific functionality such as authentication, database interaction, or APIs.
INSTALLED_APPS = [
    "daphne",  # Provides support for ASGI server.
    "channels",  # Enables handling of asynchronous protocols like WebSocket.
    "django.contrib.admin",  # Admin interface for managing the project.
    "django.contrib.auth",  # User authentication and authorization framework.
    "django.contrib.contenttypes",  # Support for content type-based permissions.
    "django.contrib.sessions",  # Manages user sessions.
    "django.contrib.messages",  # Messaging framework for user feedback.
    "django.contrib.staticfiles",  # Serves static files (CSS, JS, etc.).
    "corsheaders",  # Handles Cross-Origin Resource Sharing (CORS).
    "User",  # Custom app for user-related features.
    "Game",  # Custom app for game-related features.
    "Chat",  # Custom app for chat functionalities.
    "Tournament",  # Custom app for tournament management.
    "Notifications",  # Custom app for notifications.
    "rest_framework",  # Provides tools for building REST APIs.
    "rest_framework_simplejwt",  # Handles JWT authentication.
    "sslserver",  # Allows running the server with SSL for development.
]

# Middleware
# MIDDLEWARE processes requests and responses in the Django lifecycle.
# They handle tasks like security, session management, and request/response manipulation.
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # Adds CORS headers to responses.
    "django.middleware.security.SecurityMiddleware",  # Enforces security best practices.
    "django.middleware.csrf.CsrfViewMiddleware",  # Protects against Cross-Site Request Forgery attacks.
    "django.contrib.sessions.middleware.SessionMiddleware",  # Manages session data.
    "django.middleware.common.CommonMiddleware",  # Performs common tasks like URL rewriting.
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # Associates users with requests using sessions.
    "django.contrib.messages.middleware.MessageMiddleware",  # Handles temporary messages for users.
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # Protects against clickjacking.
]

# URL and ASGI Configuration
# ROOT_URLCONF specifies the Python module containing URL patterns for the project.
# ASGI_APPLICATION defines the ASGI callable to serve the project asynchronously.
ROOT_URLCONF = "backend.urls"
ASGI_APPLICATION = "backend.asgi.application"

# Templates
# TEMPLATES defines the configuration for rendering HTML templates.
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",  # Specifies the template engine.
        "DIRS": [],  # Additional directories to search for templates.
        "APP_DIRS": True,  # Enables template discovery within app directories.
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",  # Adds debug context variables.
                "django.template.context_processors.request",  # Adds the request object to context.
                "django.contrib.auth.context_processors.auth",  # Adds user and permissions to context.
                "django.contrib.messages.context_processors.messages",  # Adds messages to context.
            ],
        },
    },
]

# Database Configuration
# DATABASES specifies the database engine and connection settings.
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",  # Uses PostgreSQL as the database engine.
        "NAME": env("POSTGRES_DB"),  # Database name.
        "USER": env("POSTGRES_USER"),  # Database username.
        "PASSWORD": env("POSTGRES_PASSWORD"),  # Database password.
        "HOST": env("POSTGRES_HOST"),  # Database host.
        "PORT": env.int(
            "POSTGRES_PORT", default=5432
        ),  # Database port (default: 5432).
    }
}

# Custom User Model
# AUTH_USER_MODEL defines the custom user model for the project.
AUTH_USER_MODEL = "User.User"

# Authentication Backends
# AUTHENTICATION_BACKENDS specifies the backends used for authentication.
AUTHENTICATION_BACKENDS = ["django.contrib.auth.backends.ModelBackend"]

# Security Settings
# These settings enforce HTTPS and secure cookies for better security in production.
SECURE_SSL_REDIRECT = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Password Validators
# AUTH_PASSWORD_VALIDATORS enforces strong password policies.
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# LANGUAGE_CODE defines the default language for the project.
# TIME_ZONE sets the default time zone.
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True  # Enables Djangoâ€™s translation system.
USE_TZ = True  # Enables timezone-aware datetimes.

# Django REST Framework
# REST_FRAMEWORK specifies configuration for the Django REST Framework.
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # Uses JWT for authentication.
    )
}

# JWT Configuration
# SIMPLE_JWT specifies settings for JSON Web Tokens.
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=2),  # Token lifetime for access tokens.
    "REFRESH_TOKEN_LIFETIME": timedelta(days=11),  # Token lifetime for refresh tokens.
    "ROTATE_REFRESH_TOKENS": False,  # Determines if refresh tokens are rotated.
    "BLACKLIST_AFTER_ROTATION": True,  # Blacklists tokens after rotation.
    "ALGORITHM": "HS256",  # Algorithm used for encoding tokens.
    "USER_ID_FIELD": "id",  # Field used to identify users.
    "USER_ID_CLAIM": "user_id",  # Claim used to store user ID.
    "AUTH_HEADER_TYPES": ("Bearer",),  # Type of authorization header.
}

# CORS Settings
# Configures Cross-Origin Resource Sharing to allow interactions with external domains.
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = ("Content-Type", "Authorization")
CORS_ORIGIN_ALLOW_ALL = True

# Email Configuration
# EMAIL_BACKEND specifies the email backend for sending emails.
# EMAIL_SSL_CERTFILE uses the certifi library to validate SSL certificates.
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 465
EMAIL_HOST_USER = "pingpong.game.1337@gmail.com"
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True
EMAIL_SSL_CERTFILE = certifi.where()
EMAIL_SSL_KEYFILE = None

# Static and Media Files
# STATIC_URL and MEDIA_URL define the URLs for serving static and media files.
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [BASE_DIR / "static"]
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Channels Layer Configuration
# CHANNEL_LAYERS defines the configuration for Django Channels, enabling real-time features.
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",  # Uses in-memory channels for development.
    },
}

# Default Auto Field
# DEFAULT_AUTO_FIELD specifies the default field type for primary keys.
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
